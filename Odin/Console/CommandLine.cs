#region Licence Statment
// Copyright (c) Zi-Yu.com - All Rights Reserved
// http://midgard.zi-yu.com/
//
// The use and distribution terms for this software are covered by the
// LGPL (http://opensource.org/licenses/lgpl-license.php).
// By using this software in any fashion, you are agreeing to be bound by
// the terms of this license.
//
// You must not remove this notice, or any other, from this software.
#endregion

using System.IO;
using Loki.Generic.Factories;
using Odin.Core;
using System;
using Loki.Interfaces;
using Loki.Generic;
using System.Collections.Generic;
using Mono.GetOptions;
using System.Reflection;
using System.Data;
using Loki.DataRepresentation;

[assembly: Mono.UsageComplement("")]
[assembly: Mono.About("Midgard RAD Project :: http://midgard.zi-yu.com")] 
[assembly: Mono.Author("Nuno Silva")]
[assembly: Mono.Author("Pedro Santos")]
[assembly: Mono.Author("Tiago Sousa")]

namespace Odin {

	public class CommandLine : Options {

        #region General Commands

        [Option("outputs debug info", "verbose")]
        public WhatToDoNext ToVerboseMode()
        {
            Log.ToDebugLevel();
            return WhatToDoNext.GoAhead;
        }

    	[Option("output all plugins", "l")]
    	public WhatToDoNext ShowPlugins()
    	{
            Generator gen = new Generator(null);

            Console.WriteLine("Registered Loader Plugins");
            Console.WriteLine("--------------------------------");
            WritePlugins(gen.GetLoaderPlugins());
            Console.WriteLine();

            Console.WriteLine("Registered Build Plugins");
            Console.WriteLine("--------------------------------");
            WritePlugins(gen.GetBuildPlugins());
            Console.WriteLine();

            Console.WriteLine("Registered CodeGenerator Plugins");
            Console.WriteLine("--------------------------------");
            WritePlugins(gen.GetPlugins());
            
            return WhatToDoNext.GoAhead;
    	}

        [Option("Generate the Project framework", "project")]
        public WhatToDoNext RunProject(string filename)
        {
            IProject project = new Project(filename);

            Generator generator = new Generator(project);

            Console.WriteLine("Processing `{0}'...", filename);
            DateTime start = DateTime.Now;
            try
            {
                generator.Process();
            }
            catch (Exception e)
            {
                Log.Fatal(e);
            }
            DateTime end = DateTime.Now;
            Console.WriteLine("Generated framework for project `{0}'", project.Name);
            Console.WriteLine("    in `{0}' seconds", (end - start).Seconds);
            Console.WriteLine("    at `{0}'", project.OutputPath);
            Console.WriteLine();
            WriteStats(generator.Agregator);
            Console.WriteLine();

            return WhatToDoNext.GoAhead;
        }
		
        #endregion

        #region Wiki Commands

        [Option("Generates a .wiki file with the plugin docs", 'w', "to-wiki")]
        public WhatToDoNext ToWiki( string file )
        {
            if (string.IsNullOrEmpty(file)){
                file = "PluginList.wiki";
            }

            Generator gen = new Generator(null);

            using (StreamWriter writer = new StreamWriter(file)) {
                writer.WriteLine(":Summary: Midgard Plugin List");
                writer.WriteLine("(This file was generated by `*Odin.exe v{0}*')", this.GetType().Assembly.GetName().Version);
                WritePlugins(writer, new List<IPlugin>(gen.GetLoaderPlugins()), "Loader Plugins");
                WritePlugins(writer, new List<IPlugin>(gen.GetBuildPlugins()), "Build Generator Plugins");
                WritePlugins(writer, new List<IPlugin>(gen.GetPlugins()), "Code Generator Plugins");
            }

            Console.WriteLine("Generated `{0}'", file);
            return WhatToDoNext.GoAhead;
        }

        private void WritePlugins(StreamWriter writer, List<IPlugin> plugins, string title)
        {
            plugins.Sort();
            writer.WriteLine("!!!{0}", title);

            writer.WriteLine("||{!^}*Name*||{!^}*Assembly*||{!^}*Description*||{!^}*Parameters*||");
            foreach (IPlugin plug in plugins) {
                writer.WriteLine("||*{0}*||{1}.dll||{2}||{3}||", plug.Name, plug.GetType().Assembly.GetName().Name, plug.Description, GetParameters(plug));
            }
        }

        private string GetParameters(IPlugin plug)
        {
            StringWriter writer = new StringWriter();

            bool first = true;
            foreach (string param in plug.DefaultParameters.Keys) {
                if (!first) {
                    writer.Write(", ");
                } else {
                    first = false;
                }
                writer.Write("''{0}''", param);
            }
            return writer.ToString();
        }

        #endregion

        #region Utilities

        private void WriteStats(IBuildAggregator agregator)
        {
            foreach ( BuildInformation info in agregator.Informations.Values ) {
                Console.WriteLine("* Component `{0}' Information", info.Name);
                Console.WriteLine("  - Project Type: {0}", info.ProjectType);
                Console.WriteLine("  - Files: {0}", info.Files.Count);
                Console.WriteLine("  - Assemblies: {0}", info.Assemblies.Count );
                Console.WriteLine("  - References: {0}", info.References.Count);
                Console.WriteLine("  - Gac References: {0}", info.GacAssemblies.Count);
                Console.WriteLine();
            }
        }

        private static void WritePlugins(IPlugin[] plugins)
        {
            List<string> list = new List<string>();

            foreach (IPlugin plug in plugins)
            {
                list.Add(string.Format("[{1}] {0}", plug.Name, plug.GetType().Assembly.GetName().Name));
            }

            list.Sort();
            foreach (string str in list)
            {
                Console.WriteLine(str);
            }
        }

        #endregion Utilities

    };

}



