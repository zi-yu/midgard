#set( $dal = ".DataAccessLayer" )
#set( $core = ".Core" )
#set( $config = "Config" )
#set( $roles = ".Roles" )
#set( $count = "Count" )
#set( $persistanceListAll = "Persistance.GetSession().Select()" )
#set( $persistance = "Persistance" )
#set( $persistanceInstance = "Persistance.GetSession()" )
#set( $getCount = "Persistance.GetSession().GetCount()" )
using Mono.GetOptions;
using System;
using System.Xml;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using $project.Name$dal;
using $project.Name$core;
using Loki.Generic;
using System.Reflection;
using System.Web.Security;
using Roles = $project.Name$core$roles;

[assembly: Mono.UsageComplement("")]
[assembly: Mono.About("Midgard RAD Project :: http://midgard.zi-yu.com")] 
[assembly: Mono.Author("$project.Author")]

[assembly: AssemblyTitle("$namespace application")]
[assembly: AssemblyCopyright("(c) 2006 $project.Author")]
[assembly: AssemblyDescription("Config aplication for the $project.Name project")]

namespace $namespace {
	
	public class $className$config : Options {
	
		#region Editable
		
		[Option("Does some user test...", "test")]
    	public WhatToDoNext UserTest() {
    		
			WriteInfo();
			Console.WriteLine("Write here some code...");
			
            return WhatToDoNext.GoAhead;
    	}
		
		#endregion
	
		#region Database Access
		
		[Option("drops the database structure", "dropdb")]
    	public WhatToDoNext DropDatabase() {
    		WriteInfo();
			Console.WriteLine("Droping database...");
            NHibernateUtilities.DropSchema("DropSchema.sql");
			Console.WriteLine("Done!");
            return WhatToDoNext.GoAhead;
    	}
		
		[Option("creates the database structure", "generatedb","db")]
    	public WhatToDoNext CreateDatabase() {
    		WriteInfo();
			Console.WriteLine("Creating database...");
            NHibernateUtilities.CreateSchema("CreateSchema.sql");
			Console.WriteLine("Done!");
            return WhatToDoNext.GoAhead;
    	}
    	
		[Option("Executes an HQL query", "hql")]
    	public WhatToDoNext Query( string hql ) {
    		WriteInfo();
 
			Console.WriteLine("Executing query `{0}'", hql);
			
            foreach( object obj in NHibernateUtilities.HqlQuery(hql) ) {
				Console.WriteLine(obj);
            }
           
			Console.WriteLine("Done!");
            return WhatToDoNext.GoAhead;
    	}
		
		[Option("Generates the admin user/roles", "generate-admin", "admin")]
        public WhatToDoNext BootstrapAdmin()
        {
            WriteInfo();

            using (PrincipalPersistance principal = PrincipalPersistance.GetSession()) {
                RolesPersistance roles = RolesPersistance.AttachSession(principal);

                Console.WriteLine("Writing role `guest'...");
                Roles guest = roles.Create();
                guest.Name = "guest";
                roles.Update(guest);

                Console.WriteLine("Writing role `user'...");
                Roles user = roles.Create();
                user.Name = "user";
                roles.Update(user);

                Console.WriteLine("Writing role `admin'...");
                Roles admin = roles.Create();
                admin.Name = "admin";
                roles.Update(admin);

                Console.WriteLine("Writing principal `admin (pass: admin)'...");
                Principal defaultAdmin = principal.Create();
                defaultAdmin.Name = "admin";
                defaultAdmin.Password = FormsAuthentication.HashPasswordForStoringInConfigFile("admin", "sha1"); ;
                defaultAdmin.Locale = "en";
                defaultAdmin.Approved = true;
                defaultAdmin.Email = "midgard@zi-yu.com";
                defaultAdmin.Locked = false;
				
                principal.Update(defaultAdmin);  
            }

            using (PrincipalPersistance principal = PrincipalPersistance.GetSession()) {
                using( RolesPersistance roles = RolesPersistance.AttachSession(principal) ) {
                    Console.WriteLine("Adding role `admin' to user `admin'...");

                    principal.StartTransaction();
                    
                    Principal admin = principal.SelectByName("admin")[0];
                    Roles adminRole = roles.SelectByName("admin")[0];

                    admin.Roles.Add(adminRole);
                    adminRole.Users.Add(admin);

                    principal.Update(admin);
                    roles.Update(adminRole);

                    principal.CommitTransaction();
                }
            }

            Console.WriteLine("Bootstrap complete!");

            return WhatToDoNext.GoAhead;
        }

        [Option("Calls dropdb & generatedb & admin", "reset", "r")]
        public WhatToDoNext ResetDatabase()
        {
            DropDatabase();
            CreateDatabase();
            BootstrapAdmin();
            return WhatToDoNext.GoAhead;
        }
    	
    	#endregion Database Creation
    	
    	#region Database Utilities
    	
    	[Option("Shows the connection string", "conn")]
    	public WhatToDoNext ListConnectionString () {
    		WriteInfo();
    		return WhatToDoNext.GoAhead;
    	}
    	
    	#endregion Database Utilities
		
		#region General
    	
    	[Option("Sets the Debug Log Level", "verbose")]
    	public WhatToDoNext SetDebugLevel () {
			Log.ToDebugLevel();
    		Console.WriteLine("Log level set to: Debug");
    		return WhatToDoNext.GoAhead;
    	}
    	
    	#endregion Database Utilities
		
		#region Code Cleanning

        [Option("Cleans white spaces", "clean")]
        public WhatToDoNext CleanCode( string path )
        {
            if (!System.IO.Directory.Exists(path)) {
                throw new Exception("'" + path + "' Directory not find");
            }

            string[] files = GetFilesToClean(path);

            foreach (string file in files) {
                string content = System.IO.File.ReadAllText(file);
                double originalSize = (double) content.Length;

                content = RemoveComments(content);
                content = RemoveSpecificSpaces(content);

                System.IO.File.WriteAllText(file.Replace(".2clean", ""), content);
                double finalSize = (double)content.Length;

                Console.WriteLine("{0:00.0}% {1}", (finalSize / originalSize ) * 100 , file, content.Length, originalSize);
            }

            return WhatToDoNext.GoAhead;
        }

        private string RemoveSpecificSpaces(string content)
        {
			content = CleanRegex(content, @"\s*\n\s*", " ");
        
            content = CleanOperators(content,"=");
            content = CleanOperators(content, "<");
            content = CleanOperators(content, ">");
            content = CleanOperators(content, "-");
            content = CleanOperators(content, @"\+");
            content = CleanOperators(content, @"\*");
            content = CleanOperators(content,"/");
            content = CleanOperators(content, @"\(");
            content = CleanOperators(content, @"\)");
            content = CleanOperators(content, @",");
            content = CleanOperators(content, @";");
            content = CleanOperators(content, @":");
            content = CleanOperators(content, @"\{");
            content = CleanOperators(content, @"\}");

            return content;
        }

        private static string CleanOperators(string content, string op)
        {
            content = System.Text.RegularExpressions.Regex.Replace(
                    content,
                    @"\s*" + op + @"\s*", op.Replace(@"\",""),
                    System.Text.RegularExpressions.RegexOptions.Singleline
                 );
            return content;
        }

        private static string CleanRegex(string content, string regex)
        {
            return CleanRegex(content, regex, string.Empty);
        }

        private static string CleanRegex(string content, string regex, string substitute)
        {
            content = System.Text.RegularExpressions.Regex.Replace(
                    content,
                    regex, substitute,
                    System.Text.RegularExpressions.RegexOptions.Singleline
                 );
            return content;
        }

        private string RemoveComments(string content)
        {
			// inline comments
            content = System.Text.RegularExpressions.Regex.Replace(
                    content,
                    @"[^:]//.*", ""
                 );

			// block comments
            content = System.Text.RegularExpressions.Regex.Replace(
                    content, 
                    @"/\*.*?\*/","",
                    System.Text.RegularExpressions.RegexOptions.Singleline
                 );
				 
			// XML comments
			content = System.Text.RegularExpressions.Regex.Replace(
                    content,
                    @"<!--.*?-->", "",
                    System.Text.RegularExpressions.RegexOptions.Singleline
                 );

            return content;
        }

        private string[] GetFilesToClean(string path)
        {
            List<string> list = new List<string>();
            AddFiledToClean(list, path);
            return list.ToArray();
        }

        private void AddFiledToClean(List<string> list, string path)
        {
            list.AddRange(System.IO.Directory.GetFiles(path, "*.2clean.*"));
            foreach (string son in System.IO.Directory.GetDirectories(path)) {
                AddFiledToClean(list, son);
            }
        }

        #endregion Code Cleanning
        
        #region Xml2aspx

        [Option("Converts .m.xml files to aspx", "xml2aspx")]
        public WhatToDoNext Xml2aspx(string path)
        {
            List<string> files = GetXml2AspxFiles(path);
            string xslt = GetXml2aspxXslt(path);

            Console.WriteLine("Converting .m.xml files to aspx...");
            Console.WriteLine(" - Path: {0}", path);
            Console.WriteLine(" - Xslt: {0}", xslt);
            Console.WriteLine(" - Files found: {0}", files.Count);

            foreach (string file in files) {
                Console.WriteLine(" * {0}", file);
                Templates.Transform(file, xslt, file.Replace(".m.xml",".aspx"));
            }

            return WhatToDoNext.GoAhead;
        }

        private string GetXml2aspxXslt(string path)
        {
            return System.IO.Path.Combine(path,"Xslt/Xml2aspx/Xml2aspx.Main.xslt");
        }

        private List<string> GetXml2AspxFiles(string path)
        {
            List<string> files = new List<string>();
            SetFiles(files, path);
            return files;
        }

        private void SetFiles(List<string> files, string path)
        {
            files.AddRange(System.IO.Directory.GetFiles(path,"*.m.xml"));

            string[] folders = System.IO.Directory.GetDirectories(path);
            foreach (string folder in folders){
                SetFiles(files, folder);
            }
        }

        #endregion Xml2aspx

#if( $dependencies.HasDependency( "Web.I18N.Independent" ) )
		#region I18N Independent
		
		public class EntryLang {
            private string lang;

            public string Lang
            {
                get { return lang; }
                set { lang = value; }
            }

            private string localized;

            public string Localized
            {
                get { return localized; }
                set { localized = value; }
            }
        };

        public class Entry {
            private string key;
            public string Key {
                get { return key; }
                set { key = value; }
            }
            private List<EntryLang> localization = new List<EntryLang>();

            public List<EntryLang> Localization
            {
                get { return localization; }
                set { localization = value; }
            }
        }

        public class EntryList : List<Entry> {
            public bool Cache = true;
			public Entry Find( string key ) {
                return base.Find(delegate(Entry e) { return e.Key == key; });
            }
        }
		
		[Option("Generates Localization Utilities", "localize")]
        public WhatToDoNext Localize( string path )
        {
           
            if (!System.IO.Directory.Exists(path)) {
                throw new Exception("'"+path+"' Directory not find");
            }

            EntryList entries = new EntryList();
            foreach (string file in GetResourcesFiles(path)) {
                System.IO.FileInfo info = new System.IO.FileInfo(file);
                GetEntryList(file, entries);
                Console.WriteLine("Handled `{0}'", info.Name);
            }

            GenerateResourceClass("../Localization/Resources.cs", entries);

            return WhatToDoNext.GoAhead;
        }

        private void GenerateResourceClass(string file, EntryList entries)
        {
            Dictionary<string, object> args = new Dictionary<string,object>();
            args["namespace"] = "$localizationNamespace";
            args["date"] = DateTime.Now;
            args["commandLine"] = Environment.CommandLine;
            args["entries"] = entries;

            string template = "LocalizationTemplate.cs.vtl";

            Templates.Generate(null, template, file, true, args );
			Console.WriteLine("Generated `{0}'", file);
			Console.WriteLine("- Entries: {0}", entries.Count);
        }

        private void GetEntryList(string file, EntryList list)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(file);
            list.Cache = bool.Parse(doc.DocumentElement.Attributes["cache"].Value);

            foreach (XmlNode elem in doc.DocumentElement) {
                if (elem is XmlComment) {
                    continue;
                }
                Entry entry = new Entry();
                
                entry.Key = elem.Attributes["key"].Value;
                foreach (XmlNode son in elem.ChildNodes) {
                    if (son is XmlComment) {
                        continue;
                    }
                    EntryLang lang = new EntryLang();

                    lang.Lang = son.Attributes["key"].Value;
                    lang.Localized = son.InnerText;

                    entry.Localization.Add(lang);
                }

                Log.Info("Loaded `{0}'", entry.Key);
				
				Entry found = list.Find(entry.Key);
                if (found != null) {
                    Console.WriteLine("** Detected duplicate `{0}' in file `{1}'", entry.Key, file);
                    continue;
                }
				
                list.Add(entry);
            }
        }

        private IEnumerable<string> GetResourcesFiles(string path)
        {
            string[] files = System.IO.Directory.GetFiles(path,"*.xml");
            foreach( string file in files ) {
                yield return file;
            }

            foreach (string dir in System.IO.Directory.GetDirectories(path)) {
                foreach( string file in System.IO.Directory.GetFiles(dir,"*.xml")) {
                    yield return file;
                }
            }
        }
		
		#endregion I18N Independent
		
#end
		#region Main
		
		public static void Main( string[] args ) {
			$className$config options = new $className$config();
            if( args.Length == 0 ) {
                args = new string[]{ "--help" };
            }
            options.ProcessArgs( args );
		}
		
		#endregion
		
		#region Utilities
		
		private void WriteInfo()
		{
			Console.WriteLine("--- Database Information ----");
			Console.WriteLine("Conn: '{0}'", NHibernateUtilities.ConnectionString);
			Console.WriteLine("-----------------------------");
		}
		
		#endregion Utilities
		
	};

}