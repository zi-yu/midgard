using System;
using System.Collections;
using DesignPatterns;
using System.Collections.Generic;
using System.Text;
using Loki.Generic;
using Loki.Interfaces;
using Odin.Core;
using Loki.DataRepresentation.Loaders;
using NUnit.Framework;
using System.IO;
using Odin.Plugin;
using Loki.DataRepresentation;

namespace Midgard.Tests {

	[TestFixture()]
	public class NHibernateModelTester {

		#region Fields

		ICodeGenerator model = new Generator(null).PluginManager.Get("NHibernate.ModelSchema");

		#endregion

		#region Start Up

		public NHibernateModelTester()
		{
			try {
				model.Init( Globals.SmsTestProject, null, new BuildAggregator() );
			} catch (Exception ex) {
				Log.Error(ex);
			}
		}

		#endregion

		#region Generic Tests

		[Test]
		public void TestIntrinsicSupport()
		{
			foreach (IFactory factory in IntrinsicTypes.Values) {
				string intrinsic = ((Entity)factory.create(null)).AccessInterface;
				Assert.IsTrue(ModelSchema.IntrinsicTypeMapping.ContainsKey(intrinsic), "Intrinsic type " + intrinsic +" not mapped to NHibernate");
			}
		}

		#endregion

		#region Schema Tests

		private string smsModelOuput = @"<?xml version='1.0' encoding='utf-8' ?>
<!-- 
	WARNING: Generated File! Do not modify by hand!
	*************************************************************
	Generated by Midgard`s `NHibernate.ModelSchema` plugin
	*************************************************************
	From the `6` entities in the Model, the following were mapped:
		* Category
		* Principal
		* SmsBase
		* ImageSms
		* TextSms
-->
<hibernate-mapping xmlns='urn:nhibernate-mapping-2.0' schema='dbo'>
	<!-- Category Entity -->
	<class name='Sms.Core.Category, Sms.Core' table='Category' discriminator-value='105393956'>
		<id name='Id' type='Int32' column='CategoryID'>
			<generator class='native' />
		</id>
		<property name='Description' column='Description' type='String' />
		<bag name='Messages' inverse='true'>
			<key column='SmsBaseID' />
			<one-to-many class='Sms.Core.SmsBase, Sms.Core' />
		</bag>
	</class>
	<!-- Principal Entity -->
	<class name='Sms.Core.Principal, Sms.Core' table='Principal' discriminator-value='-2035371692'>
		<id name='Id' type='Int32' column='PrincipalID'>
			<generator class='native' />
		</id>
		<bag name='Messages' inverse='true'>
			<key column='SmsBaseID' />
			<one-to-many class='Sms.Core.SmsBase, Sms.Core' />
		</bag>
	</class>
	<!-- SmsBase Entity -->
	<class name='Sms.Core.SmsBase, Sms.Core' table='SmsBase' discriminator-value='991706006'>
		<id name='Id' type='Int32' column='SmsBaseID'>
			<generator class='native' />
		</id>
		<discriminator column='Discriminator' type='Int32' />
		<property name='Description' column='Description' type='String' />
		<many-to-one name='Category' column='CategoryID' not-null='true' />
		<many-to-one name='Principal' column='PrincipalID' not-null='true' />
	</class>
	<!-- ImageSms Entity -->
	<subclass	name='Sms.Core.ImageSms, Sms.Core' 
				extends='Sms.Core.SmsBase, Sms.Core'
				discriminator-value='-68347018'>			
		<property name='ImageUrl' column='ImageUrl' type='String' />
	</subclass>
	<!-- TextSms Entity -->
	<subclass	name='Sms.Core.TextSms, Sms.Core' 
				extends='Sms.Core.SmsBase, Sms.Core'
				discriminator-value='833214776'>			
		<property name='Text' column='Text' type='String' />
	</subclass>
</hibernate-mapping>
".Replace("'", "\"");

		[Test]
		public void TestSmsSchemaGeneration()
		{
			model.BeforeGenerate();
			using (StreamReader reader = new StreamReader(Path.Combine(Globals.SmsTestProject.OutputPath, "bin/Model.hbm.xml"))) {
				string xml = reader.ReadToEnd();
				Assert.AreEqual(xml.IndexOf("$"), -1, "Unvalid command?");
				Assert.AreEqual(xml, smsModelOuput);
			}
		}

		#endregion


	};
}
