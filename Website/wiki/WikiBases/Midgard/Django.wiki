:Summary: Overview do Django
:Parent: Midgard.FerramentasRAD

O [Django] é uma framework de desenvolvimento [RAD] de aplicações web em Python.

!!!O que o Django Recebe

O Django recebe um modelo object oriented da base de dados. Este modelo é feito em Python e tem toda a informação necessária. Este método pode ser comparado ao do GentleDotNet em que decoramos os tipos a persistir com metadados. Exemplo da definição do schema da BD:

 class Reporter(meta.Model):
    full_name = meta.CharField(maxlength=70)
    def __repr__(self):
        return self.full_name

 class Article(meta.Model):
    pub_date = meta.DateTimeField()
    headline = meta.CharField(maxlength=200)
    article = meta.TextField()
    reporter = meta.ForeignKey(Reporter)
    def __repr__(self):
        return self.headline


!!!O que o Django Fornece

	* Toda a API de manipulação das entidades no modelo
	* Gera uma interface web de administração; esta interface é análoga a um backoffice que pode ser acedido por administradores, ''staff'' ou mesmo utilizadores regulares
	* Facilidade de Criação de Vistas (controlos/páginas)
		* Estas vistas podem ser criadas através de um sistema de templates próprio do [Django]
	* Permite a criação fácil de ''URLs'' baseada em expressões regulares
	* Uma Framework de Cache
	* Formas fáceis de gerar RSS ou Atom criando uma simples classe

Uma limitação importante é o Django não suportar transacções, embora tal ''feature'' esteja a ser planeada:
	* http://code.djangoproject.com/ticket/9


!!!Pipeline de um Pedido

Exemplificação do atendimento de um pedido para */articles/2005/05/39323/*. Com base no URL, é invocado o seguinte código:
 myproject.news.views.article_detail(request, year='2005', month='05', article_id='39323').

Que vai dar a este método:
 def article_detail(request, year, month, article_id):
    # Use the Django API to find an object matching the URL criteria.
    a = get_object_or_404(articles, pub_date__year=year, pub_date__month=month, pk=article_id)
    return render_to_response('news/article_detail', {'article': a})

O que este método faz é procurar um template que receba aqueles parâmetros, poderia carregar o seguinte template *news/article_detail*:
 {% extends "base" %}

 {% block title %}{{ article.headline }}{% endblock %}

 {% block content %}
 <h1>{{ article.headline }}</h1>
 <p>By {{ article.get_reporter.full_name }}</p>
 <p>Published {{ article.pub_date|date:"F j, Y" }}</p>
 {{ article.article }}
 {% endblock %}

Nota para aquele *extends "base"*, que indica que esta template será aplicada à template base. Basicamente o conteúdo do *block title* será incorporado na template base, etc:

 <html>
 <head>
    <title>{% block title %}{% endblock %}</title>
 </head>
 <body>
    <img src="sitelogo.gif" alt="Logo" />
    {% block content %}{% endblock %}
 </body>
 </html>

!!!Referências Externas
	* "Django Site":http://www.djangoproject.com/
	* "Django Overview":http://www.djangoproject.com/documentation/overview/


